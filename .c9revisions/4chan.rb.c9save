{"ts":1360561510523,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"#!/usr/bin/env ruby\n\n# Beta 1\n\n# Config\nconfig = {\n\t# the name of dir where images being downloaded\n\t:images_dir => \"images\",\n\n\t# whether to overwrite downloaded images\n\t:overwrite => false,\n\n\t# may warning if images has more than defined\n\t:max_image => 25,\n\n\t# whether make archive (.tar) file from downloaded dir\n\t:archive => false,\n\n\t# downloader, using pure ruby (0) or wget (1)\n\t:downloader => 0\n}\n\n# =================================================\n# !!! Do not modify below !!!!\n# Unless you understand\n# =================================================\n\n# TODO:\n# - first time using script, generating folder, config, etc - BETA\n# - sorts folder into their respective categories, eg: /a for anime and manga - ALPHA\n# - set warning for more than x images\n# - better history\n# - using full ruby code to download files instead using wget - DONE\n\nrequire \"fileutils\"\nrequire 'open-uri'\nrequire 'nokogiri'\n\nputs \"---+--------------------------\".gsub('-',' ')\nputs \"--+----+++-+----+++---++------\".gsub('-',' ')\nputs \"-+-+--+----+-------+-+--+-----\".gsub('-',' ')\nputs \"++++  +----+++--++++-+--+-----\".gsub('-',' ')\nputs \"---+---+++-+--+-++++-+--+-----\".gsub('-',' ')\n\n# 4chan categories\ncategories = {\n\t\"a\" => \"anime and manga\",\n\t\"b\" => \"random\",\n\t\"c\" => \"anime/cute\",\n\t\"d\" => \"hentai/alternative\",\n\t\"e\" => \"ecchi\",\n\t\"f\" => \"flash\",\n\t\"g\" => \"technology\",\n\t\"gif\" => \"animated gif\",\n\t\"h\" => \"hentai\",\n\t\"hr\" => \"high resolution\",\n\t\"k\" => \"weapons\",\n\t\"m\" => \"mecha\",\n\t\"o\" => \"auto\",\n\t\"p\" => \"photo\",\n\t\"r\" => \"request\",\n\t\"s\" => \"sexy beautiful women\",\n\t\"t\" => \"torrent\",\n\t\"u\" => \"yuri\",\n\t\"v\" => \"video games\",\n\t\"vg\" => \"video games general\",\n\t\"w\" => \"anime/wallpaper\",\n\t\"wg\" => \"wallpaper/general\",\n\t\"i\" => \"oekaki\",\n\t\"ic\" => \"artwork/critique\",\n\t\"r9k\" => \"robot9001\",\n\t\"cm\" => \"cute/male\",\n\t\"hm\" => \"handsome men\",\n\t\"y\" => \"yaoi\",\n\t\"3\" => \"3d\",\n\t\"adv\" => \"advice\",\n\t\"an\" => \"animal and nature\",\n\t\"cgl\" => \"cosplay and egl\",\n\t\"ck\" => \"food and cook\",\n\t\"co\" => \"comic and cartoon\",\n\t\"diy\" => \"do-it-yourself\",\n\t\"fa\" => \"\",\n\t\"fit\" => \"\",\n\t\"hc\" => \"\",\n\t\"int\" => \"\",\n\t\"jp\" => \"\",\n\t\"lit\" => \"\",\n\t\"mlp\" => \"\",\n\t\"mu\" => \"\",\n\t\"n\" => \"\",\n\t\"po\" => \"\",\n\t\"pol\" => \"\",\n\t\"sci\" => \"\",\n\t\"soc\" => \"\",\n\t\"sp\" => \"\",\n\t\"tg\" => \"\",\n\t\"toy\" => \"\",\n\t\"trv\" => \"\",\n\t\"tv\" => \"\",\n\t\"vp\" => \"\",\n\t\"wsg\" => \"\",\n\t\"x\" => \"\",\n\t\"rs\" => \"\"\n}\nhistory = \"history.txt\"\n\n# Checking for first time\nputs \"Initializing\"\n\n# checking for image destination folder\nif File.exist?(config[:images_dir])\n\tcategories.each do |cat,desc|\n\t\tunless File.exist?(File.join(config[:images_dir],cat))\n\t\t\tputs \"Creating folder /#{cat} (#{desc}) in #{config[:images_dir]}\"\n\t\t\tDir.mkdir(File.join(config[:images_dir],cat))\n\t\tend\n\tend\nelse\n\tDir.mkdir(config[:images_dir])\n\tcategories.each do |cat,desc|\n\t\tputs \"Creating folder /#{cat} (#{desc}) in #{config[:images_dir]}\"\n\t\tDir.mkdir(File.join(config[:images_dir],cat))\n\tend\nend\n\n# making history\nunless File.exist?(history)\n\tputs \"Creating #{history}\"\n\tFileUtils.touch history\nend\n\n\n# parsing history file\nhistory_txt = File.open(history).read\nhistories = history_txt.split(\"\\n\")\nif histories.size > 0\n\th_last = histories.last.split(':::')\n\tputs \"Last url is #{h_last.last}\\nat #{Time.at(h_last.first.to_i).strftime('%e %B %Y %H:%M:%S')}\"\nend\n\nprint \"Put 4chan url: \"\n\ninput = gets.chomp.downcase\n\nif input == \"\"\n\tif histories.size > 0\n\t\tputs \"Attempting redownload previous url...\"\n\t\th_last = histories.last.split(':::')\n\t\tinput = h_last.last\n\telse\n\t\tputs \"No history found\"\n\tend\nelse\n\tFile.open(history,'a') {|f| f.write \"#{Time.now.to_i}:::#{input}\\n\"}\nend\n\n# category, where the file belong\ncategory = input.split('/')[3]\n\n# thread_id, name of the folder based on thread id\nthread_id = input.gsub(/^.*\\//,'')\n\n\nif File.exist?(File.join(config[:images_dir],category,thread_id))\n\tputs \"Warning! Thread #{thread_id} already downloaded!\"\nelse\n\tputs \"Creating new dir...\"\n\tprint \"Dir name (default: #{thread_id}/): \"\n\tt = gets.chomp.downcase\n\tif t != \"\"\n\t\tthread_id = \"#{thread_id}_#{t}\"\n\tend\n\tFileUtils.mkdir(File.join(config[:images_dir],category,thread_id))\n\tputs \"Directory #{thread_id} created\"\nend\n\nputs \"crawling `#{input}`\"\ndoc = Nokogiri::HTML(open(input))\nimages = doc.css('a.fileThumb')\n\nputs \"Got #{images.size} #{images.size > 1 ? 'images' : 'image'}\"\nputs \"Saving images to #{File.join(config[:images_dir],category,thread_id)}\"\nnum = 1\nimages.each do |image|\n\timg = \"http:\" + image.attr('href').downcase\n\n\tfilename = img.gsub(/^.*\\//,'')\n\t# TODO check if file already exist in thread, pass this if exist! - DONE\n\tif File.exist?(File.join(config[:images_dir],category,thread_id,filename))\n\t\tputs \"File #{filename} exist, skipping...\"\n\telse\n\t\tprint \"[#{num}/#{images.size}] Downloading #{filename}...\"\n\n\t\tcase config[:downloader]\n\t\twhen 1\n\t\t\t# using wget\n\t\t\tsystem(\"wget --quiet \\\"#{img}\\\" -P '#{File.join(config[:images_dir],category,thread_id)}'\")\n\t\telse\n\t\t\t# pure ruby download\n\t\t\tFile.open(File.join(config[:images_dir],category,thread_id,filename),'wb') do |save_file|\n\t\t\t\topen(img,'rb') do |read_file|\n\t\t\t\t\tsave_file.write(read_file.read)\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tputs \"done!\"\n\tend\n\tnum += 1\nend\n\nputs \"Files are saved in dir `#{File.join(config[:images_dir],category,thread_id)}`\"\n\nif config[:archive] == true\n\tputs \"Archiving #{thread_id}...\"\n\tsystem(\"tar -cvf #{thread_id}.tar #{File.join(config[:images_dir],category,thread_id)}\")\nend\n\nputs \"Done!\""]],"start1":0,"start2":0,"length1":0,"length2":5353}]],"length":5353}
{"contributors":[],"silentsave":false,"ts":1360630376305,"patch":[[{"diffs":[[0,"#"],[-1,"!/usr/bin/env"],[1," 4chan downloader using"],[0," ruby\n"],[-1,"\n"],[0,"# "],[-1,"Beta 1\n\n# Config\nconfig = {\n\t# the name of dir where images being downloaded\n\t:images_dir => \"images\",\n\n\t# whether to overwrite downloaded images\n\t:overwrite => false,\n\n\t# may warning if images has more than defined\n\t:max_image => 25,\n\n\t# whether make archive (.tar) file from downloaded dir\n\t:"],[1,"developed and tested on ubuntu\n\nrequire \"fileutils\"\nrequire \"nokogiri\"\nrequire \"open-uri\"\n\n# CONFIG\n\nIMAGES_DIR = \"images\"\nDEBUG = false\n"],[0,"arch"]],"start1":0,"start2":0,"length1":321,"length2":173},{"diffs":[[0,"ve ="],[-1,">"],[0," false"],[-1,","],[0,"\n\n"],[-1,"\t# downloader, using pure ruby (0) or wget (1)\n\t:downloader => 0\n}\n\n# =================================================\n# !!! Do not modify below !!!!\n# Unless you understand\n# =================================================\n\n# TODO:\n# - first time using script, generating folder, config, etc - BETA\n# - sorts folder into their respective categories, eg: /a for anime and manga - ALPHA\n# - set warning for more than x images\n# - better history\n# - using full ruby code to download files instead using wget - DONE\n\nrequire \"fileutils\"\nrequire 'open-uri'\nrequire 'nokogiri'\n\nputs \"---+--------------------------\".gsub('-',' ')\nputs \"--+----+++-+----+++---++------\".gsub('-',' ')\nputs \"-+-+--+----+-------+-+--+-----\".gsub('-',' ')\nputs \"++++  +----+++--++++-+--+-----\".gsub('-',' ')\nputs \"---+---+++-+--+-++++-+--+-----\".gsub('-',' ')\n\n# 4chan categories\ncategories = {\n\t\"a\" => \"anime and manga\",\n\t\"b\" => \"random\",\n\t\"c\" => \"anime/cute\",\n\t\"d\" => \"hentai/alternative\",\n\t\"e\" => \"ecchi\",\n\t\"f\" => \"flash\",\n\t\"g\" => \"technology\",\n\t\"gif\" => \"animated gif\",\n\t\"h\" => \"hentai\",\n\t\"hr\" => \"high resolution\",\n\t\"k\" => \"weapons\",\n\t\"m\" => \"mecha\",\n\t\"o\" => \"auto\",\n\t\"p\" => \"photo\",\n\t\"r\" => \"request\",\n\t\"s\" => \"sexy beautiful women\",\n\t\"t\" => \"torrent\",\n\t\"u\" => \"yuri\",\n\t\"v\" => \"video games\",\n\t\"vg\" => \"video games general\",\n\t\"w\" => \"anime/wallpaper\",\n\t\"wg\" => \"wallpaper/general\",\n\t\"i\" => \"oekaki\",\n\t\"ic\" => \"artwork/critique\",\n\t\"r9k\" => \"robot9001\",\n\t\"cm\" => \"cute/male\",\n\t\"hm\" => \"handsome men\",\n\t\"y\" => \"yaoi\",\n\t\"3\" => \"3d\",\n\t\"adv\" => \"advice\",\n\t\"an\" => \"animal and nature\",\n\t\"cgl\" => \"cosplay and egl\",\n\t\"ck\" => \"food and cook\",\n\t\"co\" => \"comic and cartoon\",\n\t\"diy\" => \"do-it-yourself\",\n\t\"fa\" => \"\",\n\t\"fit\" => \"\",\n\t\"hc\" => \"\",\n\t\"int\" => \"\",\n\t\"jp\" => \"\",\n\t\"lit\" => \"\",\n\t\"mlp\" => \"\",\n\t\"mu\" => \"\",\n\t\"n\" => \"\",\n\t\"po\" => \"\",\n\t\"pol\" => \"\",\n\t\"sci\" => \"\",\n\t\"soc\" => \"\",\n\t\"sp\" => \"\",\n\t\"tg\" => \"\",\n\t\"toy\" => \"\",\n\t\"trv\" => \"\",\n\t\"tv\" => \"\",\n\t\"vp\" => \"\",\n\t\"wsg\" => \"\",\n\t\"x\" => \"\",\n\t\"rs\" => \"\"\n}\nhistory = \"history.txt\"\n\n# Checking for first time\nputs \"Initializing\"\n\n# checking for image destination folder\nif File.exist?(config[:images_dir])\n\tcategories.each do |cat,desc|\n\t\t"],[1,"\n# ============================\n# Do not Alter pass this point\n# ============================\n\n# PREPARATIONS (directories, etc)\nunless File.exists?(File.join(IMAGES_DIR))\n    Dir.mkdir(File.join(IMAGES_DIR))\nend\n\n# ASKING URL\nprint \"Paste the URL to download: \"\nurl = gets.chomp\n\nif url == \"\"\n    abort(\"Please put URL!!\")\nend\n\n# INITIALIZING\n# e.g : http://boards.4chan.org/s/res/13870434\n\nID = url.split('/').last\nCAT = url.split(\"/\")[3]\n\n"],[0,"unle"]],"start1":174,"start2":174,"length1":2167,"length2":458},{"diffs":[[0,"nless File.exist"],[1,"s"],[0,"?(File.join(conf"]],"start1":629,"start2":629,"length1":32,"length2":33},{"diffs":[[0,"oin("],[-1,"config[:images_dir],cat))\n\t\t\tputs \"Creating folder /#{cat} (#{desc}) in #{config[:images_dir]}\"\n\t\t\tDir.mkdir(File.join(config[:images_dir],cat"],[1,"IMAGES_DIR,CAT))\n\tDir.mkdir(File.join(IMAGES_DIR,CAT"],[0,"))\n"],[-1,"\t\t"],[0,"end\n"],[-1,"\tend\nelse\n\tDir.mkdir(config[:images_dir])\n\tcategories.each do |cat,desc|\n\t\tputs \"Creating folder /#{cat} (#{desc}) in #{config[:images_dir]}\"\n\t\tDir.mkdir(File.join(config[:images_dir],cat))\n\tend\nend\n\n# making history\nunless File.exist?(history)\n\tputs \"Creating #{history}\"\n\tFileUtils.touch history\nend\n\n\n# parsing history file\nhistory_txt = File.open(history).read\nhistories = history_txt.split(\"\\n\")\nif histories.size > 0\n\th_last = histories.last.split(':::')\n\tputs \"Last url is #{h_last.last}\\nat #{Time.at(h_last.first.to_i).strftime('%e %B %Y %H:%M:%S')}\"\nend\n\nprint \"Put 4chan url: \"\n\ninput = gets.chomp.downcase\n\nif input == \"\"\n\tif histories.size > 0\n\t\tputs \"Attempting redownload previous url...\"\n\t\th_last = histories.last.split(':::')\n\t\tinput = h_last.last\n\telse\n\t\tputs \"No history found\"\n\tend\nelse\n\tFile.open(history,'a') {|f| f.write \"#{Time.now.to_i}:::#{input}\\n\"}\nend\n\n# category, where the file belong\ncategory = input.split('/')[3]\n\n# thread_id, name of the folder based on thread id\nthread_id = input.gsub(/^.*\\//,'')\n\n\nif File.exist?(File.join(config[:images_dir],category,thread_id))\n\tputs \"Warning! Thread #{thread_id} already downloaded!\"\nelse\n\tputs \"Creating new dir...\"\n\tprint \"Dir "],[1,"\n# CHECKING URL\nif Dir[File.join(IMAGES_DIR,CAT,\"*\")].grep(/#{ID}/).size > 0\n\tputs \"This URL have been downloaded. We will skip existing images.\"\n\tDIRNAME = Dir[File.join(IMAGES_DIR,CAT,\"*\")].grep(/#{ID}/).first.gsub(/^.*\\//,\"\")\nelse\n\tputs \"Directory name:\"\n\tprint \"> \"\n\tdir_"],[0,"name "],[-1,"(default: #{thread_id}/): \"\n\tt = gets.chomp.downcase\n\tif t != \"\"\n\t\tthread_id = \"#{thread_id}_#{t}\"\n\tend\n\tFileUtils.mkdir(File.join(config[:images_dir],category,thread_id))\n\tputs \"Directory #{thread_id} created\"\nend"],[1,"= gets.chomp.downcase.gsub(/[\\?\\!\\/\\ \\.\\,\\\\]+/,\"_\")\n\tDIRNAME = ID + ( dir_name != \"\" ? \"_\" : \"\") + dir_name\n\tDir.mkdir(File.join(IMAGES_DIR,CAT,DIRNAME))\nend\n\n# PROCESSING URL"],[0,"\n\nputs \""],[1,"Now "],[0,"craw"]],"start1":654,"start2":654,"length1":1590,"length2":534},{"diffs":[[0,"ing "],[-1,"`"],[0,"#{"],[-1,"input}`\""],[1,"url}\"\n"],[0,"\ndoc"]],"start1":1189,"start2":1189,"length1":19,"length2":16},{"diffs":[[0,"pen("],[-1,"input"],[1,"url"],[0,"))\ni"]],"start1":1224,"start2":1224,"length1":13,"length2":11},{"diffs":[[0,"ts \""],[-1,"Got #{images.size} #{images.size > 1 ? 'images' : 'image'}\"\nputs \"Saving images to #{File.join(config[:images_dir],category,thread_id)}\"\nnum"],[1,"There are #{images.size} images\"\nputs \"Saving images to #{File.join(IMAGES_DIR,CAT,DIRNAME).to_s}\"\n\n\n\n# DOWNLOAD IMAGES\n# if File.exists?(File.join(IMAGES_DIR,CAT,DIRNAME))\n\nloop_number"],[0," = 1\n"],[1,"\n"],[0,"imag"]],"start1":1269,"start2":1269,"length1":153,"length2":199},{"diffs":[[0,"ef')"],[-1,".downcase\n"],[0,"\n\tfi"]],"start1":1518,"start2":1518,"length1":18,"length2":8},{"diffs":[[0,"\\//,"],[-1,"'')\n\t# TODO check if file already exist in thread, pass this if exist! - DONE\n\tif File.exist?(File.join(config[:images_dir],category,thread_id"],[1,"\"\")\n\n\tprint \"#{loop_number}/#{images.size} \"\n\tif File.exist?(File.join(IMAGES_DIR,CAT,DIRNAME"],[0,",fil"]],"start1":1548,"start2":1548,"length1":150,"length2":101},{"diffs":[[0,"skipping"],[-1,"..."],[0,"\"\n\telse\n"]],"start1":1689,"start2":1689,"length1":19,"length2":16},{"diffs":[[0,"nt \""],[-1,"[#{num}/#{images.size}] "],[0,"Down"]],"start1":1710,"start2":1710,"length1":32,"length2":8},{"diffs":[[0,"\n\n\t\t"],[-1,"case config[:downloader]\n\t\twhen 1\n\t\t\t# using wget\n\t\t\tsystem(\"wget --quiet \\\"#{img}\\\" -P '#{File.join(config[:images_dir],category,thread_id)}'\")\n\t\telse\n\t\t\t# pure ruby download\n\t\t\tFile.open(File.join(config[:images_dir],category,thread_id"],[1,"File.open(File.join(IMAGES_DIR,CAT,DIRNAME"],[0,",fil"]],"start1":1741,"start2":1741,"length1":245,"length2":50},{"diffs":[[0,"ile|\n\t\t\t"],[-1,"\t"],[0,"open(img"]],"start1":1814,"start2":1814,"length1":17,"length2":16},{"diffs":[[0,"d_file|\n"],[-1,"\t"],[0,"\t\t\t\tsave"]],"start1":1844,"start2":1844,"length1":17,"length2":16},{"diffs":[[0,"ad)\n"],[-1,"\t\t\t\tend\n"],[0,"\t\t\te"]],"start1":1884,"start2":1884,"length1":16,"length2":8},{"diffs":[[0,"nd\n\t"],[-1,"num += 1\nend\n\nputs \"Files are saved in dir `#{File.join(config[:images_dir],category,thread_id)}`\"\n\nif config[:archive] == tru"],[1,"loop_number += 1\nend\n\n# ARCHIVE (only on nix)\n\n\n# ALL don"],[0,"e\n"],[-1,"\t"],[0,"puts \""],[-1,"Archiving #{thread_id}...\"\n\tsystem(\"tar -cvf #{thread_id}.tar #{File.join(config[:images_dir],category,thread_id)}\")\nend\n\nputs \"Done!"],[1,"Your #{images.size} images saved in #{File.join(IMAGES_DIR,CAT,DIRNAME)}."],[0,"\""]],"start1":1918,"start2":1918,"length1":273,"length2":143}]],"length":2061,"saved":false}
